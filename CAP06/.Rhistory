#configurando o diretorio de trabalho
getwd()
#Operadores Relacionais
7 + 7
#Soma
7 + 7
#subtração
7 - 4
#Soma
7 + 7
#subtração
7 - 4
16 %% 3
matrix (c(1,2,3,4,5,6), nr = 2)
matrix (c(1,2,3,4,5,6), nr = 3)
matrix (c(1,2,3,4,5,6), nr = 6)
matrix (c(1,2,3,4,5,6), nc = 2)
meus_dados = c(1:10)
matrix(data = meus_dados, nrow = 5, ncol = 2, byrow = T)
mat <- matrix(c(2,3,4,5), nr = 2)
mat
mat[1,2]
matriz = 1:3
diag(matriz)
matriz
vetor = diag(matriz)
diag(vetor)
vetor
w <- matrix (c(2,4,8,12), mr = 2, ncol = 2)
w <- matrix (c(2,4,8,12), nr = 2, ncol = 2)
w
t(w)
solve(W)
solve(w)
mat1 <- matrix(c(2,3,4,5),nr = 2)
mat1
mat2 <- matrix(c(6,7,8,9),nr = 2)
mat2
mat1 * mat2
mat1 + mat2
mat1 / mat2
x = c(1:4)
x
y <- matrix(c(2,3,4,5),nr = 2)
x * y
x
y
x * y
mat3 <- matrix(c('Terra', 'Marte', 'Saturno', 'Netuno'), nr =2)
mat3
dinames(mat3) = (list (c("linha1", "linha2"), c("cokuna1", "coluna2")))
dimnames(mat3) = (list (c("linha1", "linha2"), c("cokuna1", "coluna2")))
mat3
dimnames(mat3) = (list (c("linha1", "linha2"), c("coluna1", "coluna2")))
mat3
matrix (c(1,2,3,4), nr =2, nc = 2, dimnames = list(c("linha1", "linha2"), c("coluna1", "coluna2") ))
#COMBINANDO MATRIZES
mat4 <- matrix(c(2,3,4,5), nr = 2)
mat4
mat5 <- matrix(c(6,7,8,9), nr = 2)
mat5
cbindo(mat4, mat5)
rbind(mat4, mat5)
rbind(mat4, mat5) #coluna
cbindo(mat4, mat5) #linha
cbind(mat4, mat5) #linha
C(mat4)
c(mat4)
install.packages('rJava')
install.packages("xlsx")
getwd()
setwd("C:/Users/conta/OneDrive/Documentos")
install.packages("devtools")
library("devtools")
install_github("mongosoup/rmongodb", force = TRUE)
install.packages("devtools")
library("devtools")
install_github("mongosoup/rmongodb", force = TRUE)
help("mongo.create")
mongo <- mongo.create()
library(rmongodb)
mongo <- mongo.create()
mongo
mongo.is.connected(mongo)
coll <- "users.contatos"
mongo.count(mongo, coll)
res <- mongo.distinct(mongo, coll, "city")
head(res)
mongo.destroy(mongo)
setwd("C:/Users/conta/OneDrive/Documentos")
setwd("C:/Users/conta/OneDrive/Documentos")
getwd()
getwd()
getwd()
getwd()
setwd("C:/Users/conta/OneDrive/Documentos/DataScience/BIG_DATA_R_AZURE/CAP06")
getwd()
library(plyr)
library(corrplot)
library(ggplot2)
library(gridExtra)
library(ggthemes)
library(caret)
library(MASS)
library(randomForest)
library(party)
churn <- read.csv('Telco-Customer-Churn.csv')
View(churn)
str(churn)
class(churn)
str(churn)
churn2 <- as.factor(churn)
View(churn2)
churn$gender <- as.factor(churn$gender)
str(churn)
sapply(churn, function(x) sum(is.na(x)))
churn <- churn[complete.cases(churn), ]
cols_recode1 <- c(10:15)
for(i in 1:ncol(churn[,cols_recode1])) {
churn[,cols_recode1][,i] <- as.factor(mapvalues
(churn[,cols_recode1][,i], from =c("No internet service"),to=c("No")))
}
churn$MultipleLines <- as.factor(mapvalues(churn$MultipleLines,
from=c("No phone service"),
to=c("No")))
min(churn$tenure); max(churn$tenure)
group_tenure <- function(tenure){
if (tenure >= 0 & tenure <= 12){
return('0-12 Month')
}else if(tenure > 12 & tenure <= 24){
return('12-24 Month')
}else if (tenure > 24 & tenure <= 48){
return('24-48 Month')
}else if (tenure > 48 & tenure <=60){
return('48-60 Month')
}else if (tenure > 60){
return('> 60 Month')
}
}
churn$tenure_group <- sapply(churn$tenure,group_tenure)
churn$tenure_group <- as.factor(churn$tenure_group)
churn$SeniorCitizen <- as.factor(mapvalues(churn$SeniorCitizen,
from=c("0","1"),
to=c("No", "Yes")))
churn$customerID <- NULL
numeric.var <- sapply(churn, is.numeric)
corr.matrix <- cor(churn[,numeric.var])
corrplot(corr.matrix, main="\n\nGráfico de Correlação para Variáveis Numéricas", method="number")
intrain <- createDataPartition(churn$Churn,p=0.7,list=FALSE)
set.seed(2017)
training <- churn[intrain,]
testing <- churn[-intrain,]
dim(training); dim(testing)
LogModel <- glm(Churn ~ ., family=binomial(link="logit"), data=training)
str(testing)
str(intrain)
str(testing)
testing$Partner <- as.factor(testing$Partner)
str(testing)
testing$Dependents <- as.factor(testing$Dependents)
testing$PhoneService <- as.factor(testing$PhoneService)
testing$InternetService <- as.factor(testing$InternetService)
testing$Contract <- as.factor(testing$Contract)
testing$PaperlessBilling <- as.factor(testing$PaperlessBilling)
testing$PaymentMethod <- as.factor(testing$PaymentMethod)
testing$Churn <- as.factor(testing$Churn)
training$Dependents <- as.factor(training$Dependents)
training$PhoneService <- as.factor(training$PhoneService)
training$InternetService <- as.factor(training$InternetService)
training$Contract <- as.factor(training$Contract)
training$PaperlessBilling <- as.factor(training$PaperlessBilling)
training$PaymentMethod <- as.factor(training$PaymentMethod)
training$Churn <- as.factor(training$Churn)
LogModel <- glm(Churn ~ ., family=binomial(link="logit"), data=training)
print(summary(LogModel))
anova(LogModel, test="Chisq")
testing$Churn <- as.character(testing$Churn)
testing$Churn[testing$Churn=="No"] <- "0"
testing$Churn[testing$Churn=="Yes"] <- "1"
fitted.results <- predict(LogModel,newdata=testing,type='response')
fitted.results <- ifelse(fitted.results > 0.5,1,0)
misClasificError <- mean(fitted.results != testing$Churn)
print(paste('Logistic Regression Accuracy',1-misClasificError))
print("Confusion Matrix Para Logistic Regression"); table(testing$Churn, fitted.results > 0.5)
exp(cbind(OR=coef(LogModel), confint(LogModel)))
print("Confusion Matrix Para Logistic Regression"); table(testing$Churn, fitted.results > 0.5)
exp(cbind(OR=coef(LogModel), confint(LogModel)))
tree <- ctree(Churn ~ Contract+tenure_group+PaperlessBilling, training)
plot(tree, type='simple')
pred_tree <- predict(tree, testing)
print("Confusion Matrix Para Decision Tree"); table(Predicted = pred_tree, Actual = testing$Churn)
p1 <- predict(tree, training)
tab1 <- table(Predicted = p1, Actual = training$Churn)
tab2 <- table(Predicted = pred_tree, Actual = testing$Churn)
print(paste('Decision Tree Accuracy',sum(diag(tab2))/sum(tab2)))
set.seed(2017)
rfModel <- randomForest(Churn ~ ., data = training)
print(rfModel)
plot(rfModel)
pred_rf <- predict(rfModel, testing)
testing$Dependents <- as.factor(testing$Dependents)
testing$PhoneService <- as.factor(testing$PhoneService)
testing$InternetService <- as.factor(testing$InternetService)
testing$Contract <- as.factor(testing$Contract)
testing$PaperlessBilling <- as.factor(testing$PaperlessBilling)
testing$PaymentMethod <- as.factor(testing$PaymentMethod)
testing$Churn <- as.factor(testing$Churn)
pred_rf <- predict(rfModel, testing)
# Visualização da Árvore de Decisão
# Para fins de ilustração, vamos usar apenas três variáveis para plotar
# árvores de decisão, elas são “Contrato”, “tenure_group” e “PaperlessBilling”.
?ctree
str(testing)
varImpPlot(rfModel, sort=T, n.var = 10, main = 'Top 10 Feature Importance')
